mutate(source_calculation = case_when(
str_detect(metadata, "GEMR") ~ 'taken from GEM' ,
str_detect(metadata, "ECLAC") ~ 'taken from ECLAC' ,
TRUE ~ 'likely UIS'  ))
uis4wide <- disaggs_uis %>%  left_join(uis_meta, by = c('country_id', 'year','indicator_id'))
#Get categories and rename indicator
uis4wide <- uis4wide %>%
mutate(indicator = case_when(
str_detect(indicator_id, 'CR') ~ 'comp',
str_detect(indicator_id, 'ROFST') ~ 'eduout',
)) %>%
mutate(level = case_when(
str_detect(indicator_id, fixed('.1')) ~ 'prim',
str_detect(indicator_id, fixed('.2')) ~ 'lowsec',
str_detect(indicator_id, fixed('.3')) ~ 'upsec',
)) %>%
mutate(indicator = case_when(
str_detect(indicator, 'comp') ~ paste(indicator, level, 'v2_m', sep = '_'),
TRUE ~ paste(indicator, level, 'm', sep = '_')
)) %>%
mutate(Location = case_when(
str_detect(indicator_id, 'URB') ~ 'Urban',
str_detect(indicator_id, 'RUR') ~ 'Rural',
TRUE ~ NA_character_
)) %>%
mutate(Sex = case_when(
str_detect(indicator_id, fixed('.F')) ~ 'Female',
str_detect(indicator_id, fixed('.M')) ~ 'Male',
TRUE ~ NA_character_
)) %>%
mutate(Wealth = case_when(
str_detect(indicator_id, 'Q1') ~ 'Quintile 1',
str_detect(indicator_id, 'Q2') ~ 'Quintile 2',
str_detect(indicator_id, 'Q3') ~ 'Quintile 3',
str_detect(indicator_id, 'Q4') ~ 'Quintile 4',
str_detect(indicator_id, 'Q5') ~ 'Quintile 5',
TRUE ~ NA_character_
)) %>%
rowwise %>%
mutate(category = paste(
c('Location', 'Sex', 'Wealth')[which(map_lgl(c(Location, Sex, Wealth), ~ !is.na(.x)))],
collapse = ' & ')) %>%
mutate(category = if_else(category == '', 'Total', category)) %>%
rename (indicator_uis_name = indicator_id )
exploremeta <- distinct(uis4wide,metadata)
uis4wide <- uis4wide %>%  select(-survey) %>%
mutate(survey2 = case_when(
str_detect(metadata, "GEMR") ~ 'something GEM' ,
str_detect(metadata, "EU-SILC") ~ 'EU-SILC' ,
str_detect(metadata, "LIS") ~ 'LIS' ,
str_detect(metadata, "ECLAC") ~ 'ECLAC' ,
str_detect(metadata, "IPUMS") ~ 'IPUMS' ,
str_detect(metadata, "MICS") ~ 'MICS',
str_detect(metadata, "DHS") ~ 'DHS',
str_detect(metadata, "Census|census|Recensement|Censo") ~ 'Census',  TRUE ~ 'Likely national survey'  )) %>%
mutate(source_calculation = case_when(
str_detect(metadata, "GEMR") ~ 'taken from GEM' ,
str_detect(metadata, "ECLAC") ~ 'taken from ECLAC' ,
TRUE ~ 'likely UIS'  ))
table(uis4wide$survey2)
table(uis4wide$source_calculation)
check <- uis4wide %>% filter(survey2=='Likely national survey') %>% select(survey2,source_calculation,metadata,country_id,year) %>% distinct()
View(check)
uis4wide <- disaggs_uis %>%  left_join(uis_meta, by = c('country_id', 'year','indicator_id'))
#Get categories and rename indicator
uis4wide <- uis4wide %>%
mutate(indicator = case_when(
str_detect(indicator_id, 'CR') ~ 'comp',
str_detect(indicator_id, 'ROFST') ~ 'eduout',
)) %>%
mutate(level = case_when(
str_detect(indicator_id, fixed('.1')) ~ 'prim',
str_detect(indicator_id, fixed('.2')) ~ 'lowsec',
str_detect(indicator_id, fixed('.3')) ~ 'upsec',
)) %>%
mutate(indicator = case_when(
str_detect(indicator, 'comp') ~ paste(indicator, level, 'v2_m', sep = '_'),
TRUE ~ paste(indicator, level, 'm', sep = '_')
)) %>%
mutate(Location = case_when(
str_detect(indicator_id, 'URB') ~ 'Urban',
str_detect(indicator_id, 'RUR') ~ 'Rural',
TRUE ~ NA_character_
)) %>%
mutate(Sex = case_when(
str_detect(indicator_id, fixed('.F')) ~ 'Female',
str_detect(indicator_id, fixed('.M')) ~ 'Male',
TRUE ~ NA_character_
)) %>%
mutate(Wealth = case_when(
str_detect(indicator_id, 'Q1') ~ 'Quintile 1',
str_detect(indicator_id, 'Q2') ~ 'Quintile 2',
str_detect(indicator_id, 'Q3') ~ 'Quintile 3',
str_detect(indicator_id, 'Q4') ~ 'Quintile 4',
str_detect(indicator_id, 'Q5') ~ 'Quintile 5',
TRUE ~ NA_character_
)) %>%
rowwise %>%
mutate(category = paste(
c('Location', 'Sex', 'Wealth')[which(map_lgl(c(Location, Sex, Wealth), ~ !is.na(.x)))],
collapse = ' & ')) %>%
mutate(category = if_else(category == '', 'Total', category)) %>%
rename (indicator_uis_name = indicator_id )
table(uis4wide$category)
table(uis4wide$indicator)
table(uis4wide$Wealth)
table(uis4wide$Location)
exploremeta <- distinct(uis4wide,metadata)
uis4wide <- uis4wide %>%  select(-survey) %>%
mutate(survey2 = case_when(
str_detect(metadata, "GEMR") ~ 'GEM' ,
str_detect(metadata, "WIDE") ~ 'GEM' ,
str_detect(metadata, "EU-SILC") ~ 'EU-SILC' ,
str_detect(metadata, "LIS") ~ 'LIS' ,
str_detect(metadata, "ECLAC") ~ 'ECLAC' ,
str_detect(metadata, "IPUMS") ~ 'IPUMS' ,
str_detect(metadata, "MICS") ~ 'MICS',
str_detect(metadata, "DHS") ~ 'DHS',
str_detect(metadata, "Census|census|Recensement|Censo") ~ 'Census',  TRUE ~ 'Likely national survey'  )) %>%
mutate(source_calculation = case_when(
str_detect(metadata, "GEMR") ~ 'taken from GEM' ,
str_detect(metadata, "WIDE") ~ 'taken from GEM' ,
str_detect(metadata, "ECLAC") ~ 'taken from ECLAC' ,
TRUE ~ 'likely UIS'  ))
table(uis4wide$survey2)
table(uis4wide$source_calculation)
# functional programming approach
# to aggregate all categories and indicators
# with a single call
# takes microdata in LONG format, with variables 'indicator' and 'value'
# the call would then be:
# wide_aggregate(wide_long, c('Location', 'Sex', 'Wealth'), depth = 3)
#' Aggregate for a given category set
#'
#' @param df Input data frame.
#' @param cs Categories.
#'
wide_aggregate_by_cats <- function(df, cs) {
# build WIDE 'category' variable and
# variable names to group by for that category
if (identical(cs, c(""))) {
cats     <- NULL
category <- "Total"
} else {
cats     <- syms(cs)
category <- paste(sort(cs), collapse = ' & ')
}
df %>%
group_by(!!! cats, country, year, survey, indicator) %>%
summarise(
count = sum(!is.na(value)),
value = weighted.mean(value, hhweight, na.rm = TRUE)
#weight = sum(weight, na.rm = TRUE),
) %>%
na.omit %>%
mutate(category = category) %>%
select(country, year, survey, indicator, value, count, category, everything()) %>%
identity
}
#' Aggregate Over All Category Sets
#'
#' @param df Input data frame.
#' @param categories Aggregation categories.
#' @param depth Tree depth.
#'
wide_aggregate <- function(df, categories = "", depth = 1) {
# build list of combinations of disaggregation dimensions
# to specified depth
disaggs <- unique(c('', purrr::lmap(1:depth, function(n) utils::combn(categoriesinsvy, n, simplify = FALSE))))
# map aggregation function over combinations of dimensions
# and append all results
purrr::map_dfr(disaggs, function(c) wide_aggregate_by_cats(df, c))
}
###USING WIDE_CALCULATE.R###
#path2standardised <- "C:/Users/taiku/UNESCO/GEM Report - 2_standardised/" # enter path
path2standardised <- "C:/Users/taiku/Desktop/temporary_std" # testing
folder_names <- list.dirs(path2standardised) #to set the directory
folder_names
library(haven)
for (i in 2:length(folder_names)) {
survey <- substring( folder_names[[i]], 38, 50)
#survey <- substring( folder_names[[i]], 52, 65)
setwd(folder_names[[i]])
data <- read_dta(paste0("std_",survey,".dta")) # change this path
source("C:/Users/taiku/Documents/GEM UNESCO MBR/GitHub/wide2020/wide_pipeline/wide_calculate.R")
}
###USING WIDE_CALCULATE.R###
#path2standardised <- "C:/Users/taiku/UNESCO/GEM Report - 2_standardised/" # enter path
path2standardised <- "C:/Users/taiku/Desktop/temporary_std" # testing
folder_names <- list.dirs(path2standardised) #to set the directory
folder_names
library(haven)
for (i in 2:length(folder_names)) {
survey <- substring( folder_names[[i]], 38, 50)
#survey <- substring( folder_names[[i]], 52, 65)
setwd(folder_names[[i]])
data <- read_dta(paste0("std_",survey,".dta")) # change this path
source("C:/Users/taiku/Documents/GEM UNESCO MBR/GitHub/wide2020/wide_pipeline/wide_calculate.R")
}
# functional programming approach
# to aggregate all categories and indicators
# with a single call
# takes microdata in LONG format, with variables 'indicator' and 'value'
# the call would then be:
# wide_aggregate(wide_long, c('Location', 'Sex', 'Wealth'), depth = 3)
#' Aggregate for a given category set
#'
#' @param df Input data frame.
#' @param cs Categories.
#'
wide_aggregate_by_cats <- function(df, cs) {
# build WIDE 'category' variable and
# variable names to group by for that category
if (identical(cs, c(""))) {
cats     <- NULL
category <- "Total"
} else {
cats     <- syms(cs)
category <- paste(sort(cs), collapse = ' & ')
}
df %>%
group_by(!!! cats, country, year, survey, indicator) %>%
summarise(
count = sum(!is.na(value)),
value = weighted.mean(value, hhweight, na.rm = TRUE)
#weight = sum(weight, na.rm = TRUE),
) %>%
na.omit %>%
mutate(category = category) %>%
select(country, year, survey, indicator, value, count, category, everything()) %>%
identity
}
#' Aggregate Over All Category Sets
#'
#' @param df Input data frame.
#' @param categories Aggregation categories.
#' @param depth Tree depth.
#'
wide_aggregate <- function(df, categories = "", depth = 1) {
# build list of combinations of disaggregation dimensions
# to specified depth
disaggs <- unique(c('', purrr::lmap(1:depth, function(n) utils::combn(categoriesinsvy, n, simplify = FALSE))))
# map aggregation function over combinations of dimensions
# and append all results
purrr::map_dfr(disaggs, function(c) wide_aggregate_by_cats(df, c))
}
## New piece: for aggregations such as disability
summ_bypieces <- function(qsfile, wide_outcome_vars, depth = 2, categoriesinsvy) {
#Generate a long version of wide_calculate qs file
wide_long <-  pivot_longer(qsfile, names_to = 'indicator', cols = any_of(wide_outcome_vars))
print("pivoted")
# Run aggregation
summarized_wide <- wide_aggregate(wide_long, categoriesinsvy, depth = 2)
print("summarized")
summarized_wider <-  pivot_wider(summarized_wide, names_from = 'indicator',  values_from = c(value,count))
print("re-pivoted")
#Fixing indicator names
summarized_wider <- summarized_wider %>% rename_all(~stringr::str_replace(.,"^value_",""))  %>%
rename_with(~paste0(., "_m"), any_of(wide_outcome_vars)) %>%
rename_with(~paste0(., "_no"), any_of(paste0('count_',wide_outcome_vars)))  %>%
rename_all(~stringr::str_replace(.,"^count_","")) %>%
rename_all(~stringr::str_replace(.,"CDISABILITY","disability")) %>%
rename_all(~stringr::str_replace(.,"FSDISABILITY","disability")) %>%
rename_all(~stringr::str_replace(.,"FunctionalDifficulty_adults","disability"))
#Fixing category names
summarized_wider %>% mutate(category= str_to_title(category))
}
########### USING wide_summarize_ALT.R ###########
#Don't forget to run wide_summarize_ALT.R to get the programs !!!!!!
#FYI: for some reason, start a new Rstudio session before running this
library(dplyr)
library(stringr)
library(tidyr)
library(qs)
#Set this if dealing with BGD 2019 MICS
#memory.limit(size = 45500)
#path2calculated <- "C:/Users/taiku/UNESCO/GEM Report - 3_calculated" # enter path
path2calculated <- "C:/Users/taiku/Desktop/temporary_std" # just 3 first files to test
file_names <- list.files(path2calculated) #to set the directory
file_names
#Don't forget to run wide_summarize_ALT.R to get the programs
for (i in 1:length(file_names)) {
setwd(path2calculated)
print(file_names[[i]])
wide_calculate <- qread(file_names[[i]])
#Outcome vars
if("literacy_1524" %in% colnames(wide_calculate))
{
wide_outcome_vars <- names(select(wide_calculate, literacy_1524, overage2plus, attend_higher, comp_prim_v2:edu4_2024))
} else {
wide_outcome_vars <- names(select(wide_calculate, overage2plus, attend_higher, comp_prim_v2:edu4_2024))
}
#variable "country"
if(!"country" %in% colnames(wide_calculate))
{
wide_calculate <- wide_calculate %>% mutate(country =  str_split(country_year, "_")[[1]][1])
}
#Generate the categories checking the dataset
emptycheck <- all.equal("",unique(wide_calculate$location))
if(emptycheck==TRUE){
categoriesinsvy <- c('sex', 'wealth')
} else {
emptycheck <- all.equal("",unique(wide_calculate$region))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location')
} else {
emptycheck <- all.equal("",unique(wide_calculate$religion))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location', 'region')
} else {
categoriesinsvy <- c('sex', 'wealth', 'location', 'region', 'religion')
}
}
}
#Generate a long version of wide_calculate qs file
wide_long <-  pivot_longer(wide_calculate, names_to = 'indicator', cols = any_of(wide_outcome_vars))
print("pivoted")
# Run aggregation
summarized_wide <- wide_aggregate(wide_long, categoriesinsvy, depth = 3)
print("summarized")
summarized_wider <-  pivot_wider(summarized_wide, names_from = 'indicator',  values_from = c(value,count))
print("re-pivoted")
#Fixing indicator names
summarized_wider <- summarized_wider %>% rename_all(~stringr::str_replace(.,"^value_",""))  %>%
rename_with(~paste0(., "_m"), any_of(wide_outcome_vars)) %>%
rename_with(~paste0(., "_no"), any_of(paste0('count_',wide_outcome_vars)))  %>%
rename_all(~stringr::str_replace(.,"^count_",""))
#Fixing category names
summarized_wider <- summarized_wider %>% mutate(category= str_to_title(category))
# Export data as .csv format by country
survey <- substring( file_names[[i]], 1, 13)
setwd("C:/Users/taiku/Desktop/temporary_sum")
write.csv(summarized_wider, paste0(survey,"_summarized.csv"))
}
emptycheck <- all.equal("",unique(wide_calculate$location))
emptycheck
names(wide_calculate)
?all_equal
emptycheck
unique(wide_calculate$location)
all.equal("",unique(wide_calculate$location)[1])
unique(wide_calculate$religion)
emptycheck <- all.equal("",unique(wide_calculate$location))
if(emptycheck==TRUE){
categoriesinsvy <- c('sex', 'wealth')
} else {
emptycheck <- all.equal("",unique(wide_calculate$region))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location')
} else {
emptycheck <- all.equal("",unique(wide_calculate$religion))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location', 'region')
} else {
categoriesinsvy <- c('sex', 'wealth', 'location', 'region', 'religion')
}
}
}
all.equal("",unique(wide_calculate$location))
isTRUE(all.equal("",unique(wide_calculate$location)))
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$location)))
if(emptycheck==TRUE){
categoriesinsvy <- c('sex', 'wealth')
} else {
emptycheck <- all.equal("",unique(wide_calculate$region))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location')
} else {
emptycheck <- all.equal("",unique(wide_calculate$religion))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location', 'region')
} else {
categoriesinsvy <- c('sex', 'wealth', 'location', 'region', 'religion')
}
}
}
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$location)))
if(emptycheck==TRUE){
categoriesinsvy <- c('sex', 'wealth')
} else {
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$region)))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location')
} else {
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$religion)))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location', 'region')
} else {
categoriesinsvy <- c('sex', 'wealth', 'location', 'region', 'religion')
}
}
}
########### USING wide_summarize_ALT.R ###########
#Don't forget to run wide_summarize_ALT.R to get the programs !!!!!!
#FYI: for some reason, start a new Rstudio session before running this
library(dplyr)
library(stringr)
library(tidyr)
library(qs)
#Set this if dealing with BGD 2019 MICS
#memory.limit(size = 45500)
#path2calculated <- "C:/Users/taiku/UNESCO/GEM Report - 3_calculated" # enter path
path2calculated <- "C:/Users/taiku/Desktop/temporary_std" # just 3 first files to test
file_names <- list.files(path2calculated) #to set the directory
file_names
#Don't forget to run wide_summarize_ALT.R to get the programs
for (i in 1:length(file_names)) {
setwd(path2calculated)
print(file_names[[i]])
wide_calculate <- qread(file_names[[i]])
#Outcome vars
if("literacy_1524" %in% colnames(wide_calculate))
{
wide_outcome_vars <- names(select(wide_calculate, literacy_1524, overage2plus, attend_higher, comp_prim_v2:edu4_2024))
} else {
wide_outcome_vars <- names(select(wide_calculate, overage2plus, attend_higher, comp_prim_v2:edu4_2024))
}
#variable "country"
if(!"country" %in% colnames(wide_calculate))
{
wide_calculate <- wide_calculate %>% mutate(country =  str_split(country_year, "_")[[1]][1])
}
#Generate the categories checking the dataset
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$location)))
if(emptycheck==TRUE){
categoriesinsvy <- c('sex', 'wealth')
} else {
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$region)))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location')
} else {
emptycheck <- isTRUE(all.equal("",unique(wide_calculate$religion)))
if(emptycheck==TRUE){
categoriesinsvy <-c('sex', 'wealth', 'location', 'region')
} else {
categoriesinsvy <- c('sex', 'wealth', 'location', 'region', 'religion')
}
}
}
#Generate a long version of wide_calculate qs file
wide_long <-  pivot_longer(wide_calculate, names_to = 'indicator', cols = any_of(wide_outcome_vars))
print("pivoted")
# Run aggregation
summarized_wide <- wide_aggregate(wide_long, categoriesinsvy, depth = 3)
print("summarized")
summarized_wider <-  pivot_wider(summarized_wide, names_from = 'indicator',  values_from = c(value,count))
print("re-pivoted")
#Fixing indicator names
summarized_wider <- summarized_wider %>% rename_all(~stringr::str_replace(.,"^value_",""))  %>%
rename_with(~paste0(., "_m"), any_of(wide_outcome_vars)) %>%
rename_with(~paste0(., "_no"), any_of(paste0('count_',wide_outcome_vars)))  %>%
rename_all(~stringr::str_replace(.,"^count_",""))
#Fixing category names
summarized_wider <- summarized_wider %>% mutate(category= str_to_title(category))
# Export data as .csv format by country
survey <- substring( file_names[[i]], 1, 13)
setwd("C:/Users/taiku/Desktop/temporary_sum")
write.csv(summarized_wider, paste0(survey,"_summarized.csv"))
}
#setwd("C:/Users/taiku/UNESCO/GEM Report - 3_calculated")
setwd("C:/Users/taiku/Desktop/temporary_sum")
all_indicators <- ldply(list.files(), read.csv, header=TRUE)
#OPTIONAL: merge all indicators into a single csv file
library(plyr)
#setwd("C:/Users/taiku/UNESCO/GEM Report - 3_calculated")
setwd("C:/Users/taiku/Desktop/temporary_sum")
all_indicators <- ldply(list.files(), read.csv, header=TRUE)
write.csv(all_indicators, paste0("widetable","_summarized_2022update.csv"))
write.csv(all_indicators, paste0("widetable","_summarized_2022update.csv"), na = '')
###USING WIDE_CALCULATE.R###
#path2standardised <- "C:/Users/taiku/UNESCO/GEM Report - 2_standardised/" # enter path
path2standardised <- "C:/Users/taiku/Desktop/temporary_std" # testing
folder_names <- list.dirs(path2standardised) #to set the directory
folder_names
library(haven)
for (i in 2:length(folder_names)) {
survey <- substring( folder_names[[i]], 38, 50)
#survey <- substring( folder_names[[i]], 52, 65)
setwd(folder_names[[i]])
data <- read_dta(paste0("std_",survey,".dta")) # change this path
source("C:/Users/taiku/Documents/GEM UNESCO MBR/GitHub/wide2020/wide_pipeline/wide_calculate.R")
}
path2standardised <- "C:/Users/taiku/Desktop/temporary_std" # testing
folder_names <- list.dirs(path2standardised) #to set the directory
folder_names
###USING WIDE_CALCULATE.R###
#path2standardised <- "C:/Users/taiku/UNESCO/GEM Report - 2_standardised/" # enter path
path2standardised <- "C:/Users/taiku/Desktop/temporary_std" # testing
folder_names <- list.dirs(path2standardised) #to set the directory
folder_names
library(haven)
for (i in 2:length(folder_names)) {
survey <- substring( folder_names[[i]], 38, 50)
#survey <- substring( folder_names[[i]], 52, 65)
setwd(folder_names[[i]])
data <- read_dta(paste0("std_",survey,".dta")) # change this path
source("C:/Users/taiku/Documents/GEM UNESCO MBR/GitHub/wide2020/wide_pipeline/wide_calculate.R")
}
########### USING wide_summarize_ALT.R ############
####TEST.SPACE
#Don't forget to run wide_summarize_ALT.R to get the programs !!!!!!
#FYI: for some reason, start a new Rstudio session before running this
library(dplyr)
library(stringr)
library(tidyr)
library(qs)
library(tidyverse)
library(dplyr)
library(stringr)
library(tidyr)
library(qs)
library(tidyverse)
